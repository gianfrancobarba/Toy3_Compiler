
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package toy3;

import java_cup.runtime.*;
import java.util.*;
import main.nodes.program.ProgramOp;
import main.nodes.program.BeginEndOp;
import main.nodes.declarations.VarDeclOp;
import main.nodes.declarations.VarOptInitOp;
import main.nodes.declarations.ParDeclOp;
import main.nodes.declarations.PVarOp;
import main.nodes.declarations.FunDeclOp;
import main.nodes.expr.ExprOp;
import main.nodes.expr.BinaryExprOp;
import main.nodes.expr.UnaryExprOp;
import main.nodes.expr.FunCallOp;
import main.nodes.common.Identifier;
import main.nodes.statements.StatementOp;
import main.nodes.statements.ReadOp;
import main.nodes.statements.WriteOp;
import main.nodes.statements.AssignOp;
import main.nodes.statements.IfThenElseOp;
import main.nodes.statements.IfThenOp;
import main.nodes.statements.WhileOp;
import main.nodes.statements.ReturnOp;
import main.nodes.statements.BodyOp;
import main.nodes.types.ConstOp;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\003\000\002\006\005\000\002" +
    "\012\011\000\002\012\010\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\006\000\002\021\004\000\002" +
    "\021\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\006\000\002\025\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\007\003\000\002\007\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\004\005\001\002\000\004\002\222\001" +
    "\002\000\010\005\ufffd\012\010\064\006\001\002\000\010" +
    "\010\ufff7\041\114\057\221\001\002\000\004\010\214\001" +
    "\002\000\004\064\160\001\002\000\010\005\ufffd\012\010" +
    "\064\006\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\012\010\064\006\001\002\000\004\005\ufffe\001\002" +
    "\000\036\006\ufffb\013\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\032\ufffb\035\ufffb\050\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\001\002\000\036\006\uffe8\013\042\024" +
    "\027\025\036\026\026\027\031\032\023\035\037\050\024" +
    "\060\034\061\021\062\017\063\043\064\033\001\002\000" +
    "\050\007\uffb9\010\uffb9\011\uffb9\014\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\001\002\000\040\006\uffe8\013\042\016\uffe8\024\027\025" +
    "\036\026\026\027\031\032\023\035\037\050\024\060\034" +
    "\061\021\062\017\063\043\064\154\001\002\000\050\007" +
    "\uffbb\010\uffbb\011\uffbb\014\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\057\uffbb\001\002" +
    "\000\050\007\uffca\010\uffca\011\uffca\014\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\051\uffca\052\uffca\054\uffca\055\uffca\057" +
    "\uffca\001\002\000\004\013\146\001\002\000\026\013\042" +
    "\024\027\025\036\035\037\050\024\060\034\061\021\062" +
    "\017\063\043\064\046\001\002\000\004\006\144\001\002" +
    "\000\026\013\042\024\027\025\036\035\037\050\024\060" +
    "\034\061\021\062\017\063\043\064\046\001\002\000\050" +
    "\007\uffbe\010\uffbe\011\uffbe\014\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\057\uffbe\001" +
    "\002\000\042\007\141\011\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\001\002\000\004" +
    "\013\126\001\002\000\044\007\uffdb\011\124\014\uffdb\034" +
    "\057\035\053\036\064\037\062\042\063\043\056\044\067" +
    "\045\061\046\060\047\066\051\054\052\070\054\uffdb\055" +
    "\uffdb\001\002\000\054\010\ufff7\011\uffcc\013\047\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffdd\041\114\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc" +
    "\053\uffdd\054\uffcc\055\uffcc\057\115\001\002\000\050\007" +
    "\uffbc\010\uffbc\011\uffbc\014\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\057\uffbc\001\002" +
    "\000\040\006\ufffc\013\ufffc\016\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\032\ufffc\035\ufffc\050\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\001\002\000\050\007\uffbd\010" +
    "\uffbd\011\uffbd\014\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\055\uffbd\057\uffbd\001\002\000\026" +
    "\013\042\024\027\025\036\035\037\050\024\060\034\061" +
    "\021\062\017\063\043\064\046\001\002\000\006\054\107" +
    "\055\110\001\002\000\006\040\103\053\102\001\002\000" +
    "\026\013\042\024\027\025\036\035\037\050\024\060\034" +
    "\061\021\062\017\063\043\064\046\001\002\000\050\007" +
    "\uffba\010\uffba\011\uffba\014\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\051\uffba\052\uffba\054\uffba\055\uffba\057\uffba\001\002" +
    "\000\034\014\065\034\057\035\053\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\054" +
    "\052\070\001\002\000\050\007\uffcb\010\uffcb\011\uffcb\014" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\001\002\000\052\007\uffcc\010\uffcc" +
    "\011\uffcc\013\047\014\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\055\uffcc\057\uffcc\001\002\000" +
    "\030\013\042\014\051\024\027\025\036\035\037\050\024" +
    "\060\034\061\021\062\017\063\043\064\046\001\002\000" +
    "\004\014\052\001\002\000\050\007\uffd9\010\uffd9\011\uffd9" +
    "\014\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9" +
    "\054\uffd9\055\uffd9\057\uffd9\001\002\000\050\007\uffda\010" +
    "\uffda\011\uffda\014\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051" +
    "\uffda\052\uffda\054\uffda\055\uffda\057\uffda\001\002\000\026" +
    "\013\uffc6\024\uffc6\025\uffc6\035\uffc6\050\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000\026\013\042" +
    "\024\027\025\036\035\037\050\024\060\034\061\021\062" +
    "\017\063\043\064\046\001\002\000\026\013\042\024\027" +
    "\025\036\035\037\050\024\060\034\061\021\062\017\063" +
    "\043\064\046\001\002\000\026\013\042\024\027\025\036" +
    "\035\037\050\024\060\034\061\021\062\017\063\043\064" +
    "\046\001\002\000\026\013\uffc7\024\uffc7\025\uffc7\035\uffc7" +
    "\050\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\001" +
    "\002\000\026\013\042\024\027\025\036\035\037\050\024" +
    "\060\034\061\021\062\017\063\043\064\046\001\002\000" +
    "\026\013\042\024\027\025\036\035\037\050\024\060\034" +
    "\061\021\062\017\063\043\064\046\001\002\000\026\013" +
    "\uffc4\024\uffc4\025\uffc4\035\uffc4\050\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\001\002\000\026\013\042\024" +
    "\027\025\036\035\037\050\024\060\034\061\021\062\017" +
    "\063\043\064\046\001\002\000\026\013\uffc5\024\uffc5\025" +
    "\uffc5\035\uffc5\050\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\001\002\000\050\007\uffcf\010\uffcf\011\uffcf\014" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\057\uffcf\001\002\000\026\013\042\024\027" +
    "\025\036\035\037\050\024\060\034\061\021\062\017\063" +
    "\043\064\046\001\002\000\026\013\042\024\027\025\036" +
    "\035\037\050\024\060\034\061\021\062\017\063\043\064" +
    "\046\001\002\000\026\013\042\024\027\025\036\035\037" +
    "\050\024\060\034\061\021\062\017\063\043\064\046\001" +
    "\002\000\050\007\uffd6\010\uffd6\011\uffd6\014\uffd6\034\057" +
    "\035\053\036\064\037\062\042\063\043\056\044\067\045" +
    "\061\046\060\047\066\051\054\052\uffd6\054\uffd6\055\uffd6" +
    "\057\uffd6\001\002\000\050\007\uffd3\010\uffd3\011\uffd3\014" +
    "\uffd3\034\057\035\053\036\064\037\062\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\054" +
    "\uffd3\055\uffd3\057\uffd3\001\002\000\050\007\uffd0\010\uffd0" +
    "\011\uffd0\014\uffd0\034\057\035\053\036\064\037\062\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0" +
    "\052\uffd0\054\uffd0\055\uffd0\057\uffd0\001\002\000\050\007" +
    "\uffd5\010\uffd5\011\uffd5\014\uffd5\034\057\035\053\036\064" +
    "\037\062\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\057\uffd5\001\002" +
    "\000\050\007\uffd2\010\uffd2\011\uffd2\014\uffd2\034\057\035" +
    "\053\036\064\037\062\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\057" +
    "\uffd2\001\002\000\050\007\uffd1\010\uffd1\011\uffd1\014\uffd1" +
    "\034\057\035\053\036\064\037\062\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\001\002\000\050\007\uffd4\010\uffd4\011" +
    "\uffd4\014\uffd4\034\057\035\053\036\064\037\062\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\001\002\000\050\007\uffd8" +
    "\010\uffd8\011\uffd8\014\uffd8\034\057\035\053\036\064\037" +
    "\062\042\063\043\056\044\067\045\061\046\060\047\066" +
    "\051\054\052\070\054\uffd8\055\uffd8\057\uffd8\001\002\000" +
    "\050\007\uffd7\010\uffd7\011\uffd7\014\uffd7\034\057\035\053" +
    "\036\064\037\062\042\063\043\056\044\067\045\061\046" +
    "\060\047\066\051\uffd7\052\uffd7\054\uffd7\055\uffd7\057\uffd7" +
    "\001\002\000\004\007\106\001\002\000\026\013\042\024" +
    "\027\025\036\035\037\050\024\060\034\061\021\062\017" +
    "\063\043\064\046\001\002\000\004\007\105\001\002\000" +
    "\040\006\uffe4\013\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\032\uffe4\035\uffe4\050\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\001\002\000\040\006\uffe7\013\uffe7" +
    "\016\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\035" +
    "\uffe7\050\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\001\002\000\004\007\112\001\002\000\004\007\111\001" +
    "\002\000\040\006\uffe5\013\uffe5\016\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\035\uffe5\050\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\001\002\000\040\006\uffe6" +
    "\013\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\032" +
    "\uffe6\035\uffe6\050\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\001\002\000\050\007\uffce\010\uffce\011\uffce\014" +
    "\uffce\034\057\035\053\036\uffce\037\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\054" +
    "\uffce\055\uffce\057\uffce\001\002\000\026\013\042\024\027" +
    "\025\036\035\037\050\024\060\034\061\021\062\017\063" +
    "\043\064\046\001\002\000\004\064\116\001\002\000\014" +
    "\010\ufff7\040\uffdd\041\114\053\uffdd\057\115\001\002\000" +
    "\004\010\ufff9\001\002\000\006\040\uffde\053\uffde\001\002" +
    "\000\036\010\ufff6\034\057\035\053\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\054" +
    "\052\070\057\122\001\002\000\004\064\006\001\002\000" +
    "\004\010\ufff8\001\002\000\026\013\042\024\027\025\036" +
    "\035\037\050\024\060\034\061\021\062\017\063\043\064" +
    "\046\001\002\000\012\007\uffdc\014\uffdc\054\uffdc\055\uffdc" +
    "\001\002\000\026\013\042\024\027\025\036\035\037\050" +
    "\024\060\034\061\021\062\017\063\043\064\046\001\002" +
    "\000\034\014\130\034\057\035\053\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\054" +
    "\052\070\001\002\000\004\030\131\001\002\000\004\015" +
    "\132\001\002\000\036\013\ufffb\016\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\032\ufffb\035\ufffb\050\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\001\002\000\042\006\uffe1" +
    "\013\uffe1\016\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031" +
    "\134\032\uffe1\035\uffe1\050\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\001\002\000\004\015\132\001\002\000" +
    "\040\006\uffe2\013\uffe2\016\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\032\uffe2\035\uffe2\050\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\001\002\000\036\013\042\016\uffe8" +
    "\024\027\025\036\026\026\027\031\032\023\035\037\050" +
    "\024\060\034\061\021\062\017\063\043\064\033\001\002" +
    "\000\004\016\140\001\002\000\046\005\uffea\006\uffea\012" +
    "\uffea\013\uffea\016\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\031\uffea\032\uffea\035\uffea\050\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\001\002\000\040\006\uffe3\013\uffe3" +
    "\016\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\032\uffe3\035" +
    "\uffe3\050\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\001\002\000\034\007\143\034\057\035\053\036\064\037" +
    "\062\042\063\043\056\044\067\045\061\046\060\047\066" +
    "\051\054\052\070\001\002\000\040\006\uffdf\013\uffdf\016" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf\035\uffdf" +
    "\050\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001" +
    "\002\000\004\002\000\001\002\000\050\007\uffcd\010\uffcd" +
    "\011\uffcd\014\uffcd\034\057\035\053\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\057\uffcd\001\002\000\026\013" +
    "\042\024\027\025\036\035\037\050\024\060\034\061\021" +
    "\062\017\063\043\064\046\001\002\000\034\014\150\034" +
    "\057\035\053\036\064\037\062\042\063\043\056\044\067" +
    "\045\061\046\060\047\066\051\054\052\070\001\002\000" +
    "\004\033\151\001\002\000\004\015\132\001\002\000\040" +
    "\006\uffe0\013\uffe0\016\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\032\uffe0\035\uffe0\050\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\001\002\000\006\006\uffe9\016\uffe9\001" +
    "\002\000\050\011\uffcc\013\047\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffdd\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffdd\054\uffcc\055\uffcc" +
    "\057\155\001\002\000\004\064\156\001\002\000\010\040" +
    "\uffdd\053\uffdd\057\155\001\002\000\004\005\uffff\001\002" +
    "\000\004\013\161\001\002\000\010\014\167\056\165\064" +
    "\162\001\002\000\006\010\uffee\011\uffee\001\002\000\004" +
    "\010\212\001\002\000\006\010\uffef\011\210\001\002\000" +
    "\004\064\207\001\002\000\004\014\204\001\002\000\006" +
    "\010\173\015\uffeb\001\002\000\006\007\171\014\ufff2\001" +
    "\002\000\006\056\165\064\162\001\002\000\004\014\ufff3" +
    "\001\002\000\014\017\203\020\201\021\176\022\177\023" +
    "\202\001\002\000\004\015\132\001\002\000\010\005\ufff4" +
    "\012\ufff4\064\ufff4\001\002\000\010\007\uffc1\014\uffc1\015" +
    "\uffc1\001\002\000\010\007\uffc0\014\uffc0\015\uffc0\001\002" +
    "\000\004\015\uffec\001\002\000\010\007\uffc2\014\uffc2\015" +
    "\uffc2\001\002\000\010\007\uffbf\014\uffbf\015\uffbf\001\002" +
    "\000\010\007\uffc3\014\uffc3\015\uffc3\001\002\000\006\010" +
    "\173\015\uffeb\001\002\000\004\015\132\001\002\000\010" +
    "\005\ufff5\012\ufff5\064\ufff5\001\002\000\006\010\uffed\011" +
    "\uffed\001\002\000\006\056\165\064\162\001\002\000\004" +
    "\010\ufff0\001\002\000\014\017\203\020\201\021\176\022" +
    "\177\023\202\001\002\000\006\007\ufff1\014\ufff1\001\002" +
    "\000\030\017\203\020\201\021\176\022\177\023\202\024" +
    "\027\025\036\060\034\061\021\062\017\063\043\001\002" +
    "\000\004\007\uffc9\001\002\000\004\007\220\001\002\000" +
    "\004\007\uffc8\001\002\000\044\005\ufffa\006\ufffa\012\ufffa" +
    "\013\ufffa\016\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\032" +
    "\ufffa\035\ufffa\050\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\001\002\000\004\064\006\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\010\006\006\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\156\005\010\006\006\012\012\001\001\000\002\001\001" +
    "\000\012\003\013\005\010\006\006\012\012\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\024\005\034" +
    "\006\006\011\021\021\024\022\017\023\040\024\037\025" +
    "\027\026\031\001\001\000\002\001\001\000\020\011\021" +
    "\021\152\022\017\023\040\024\037\025\027\026\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\021\025\044\026\144\001\001\000\002\001" +
    "\001\000\010\011\021\025\044\026\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\021\025\044\026" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\021\025\044\026\043\001\001\000\002\001\001\000" +
    "\004\027\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\021\024\047\025\044\026\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\021\025\044\026\100\001\001\000" +
    "\010\011\021\025\044\026\077\001\001\000\010\011\021" +
    "\025\044\026\076\001\001\000\002\001\001\000\010\011" +
    "\021\025\044\026\075\001\001\000\010\011\021\025\044" +
    "\026\074\001\001\000\002\001\001\000\010\011\021\025" +
    "\044\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\021\025\044\026\072\001\001\000\010\011" +
    "\021\025\044\026\071\001\001\000\010\011\021\025\044" +
    "\026\070\001\001\000\004\027\054\001\001\000\004\027" +
    "\054\001\001\000\004\027\054\001\001\000\004\027\054" +
    "\001\001\000\004\027\054\001\001\000\004\027\054\001" +
    "\001\000\004\027\054\001\001\000\004\027\054\001\001" +
    "\000\004\027\054\001\001\000\002\001\001\000\012\011" +
    "\021\024\103\025\044\026\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\054\001\001\000\010\011\021\025\044\026\120\001" +
    "\001\000\006\006\116\023\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\054\001" +
    "\001\000\004\006\122\001\001\000\002\001\001\000\012" +
    "\011\021\024\124\025\044\026\031\001\001\000\002\001" +
    "\001\000\010\011\021\025\044\026\126\001\001\000\004" +
    "\027\054\001\001\000\002\001\001\000\004\020\132\001" +
    "\001\000\004\004\135\001\001\000\002\001\001\000\004" +
    "\020\134\001\001\000\002\001\001\000\024\005\034\006" +
    "\006\011\021\021\136\022\017\023\040\024\037\025\027" +
    "\026\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\054\001\001\000\010\011" +
    "\021\025\044\026\146\001\001\000\004\027\054\001\001" +
    "\000\002\001\001\000\004\020\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\165\014\167\015\162\016\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\173\001\001" +
    "\000\002\001\001\000\012\013\171\014\167\015\162\016" +
    "\163\001\001\000\002\001\001\000\004\010\177\001\001" +
    "\000\004\020\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\204\001" +
    "\001\000\004\020\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\210\016\163\001\001\000\002\001" +
    "\001\000\004\010\212\001\001\000\002\001\001\000\010" +
    "\007\215\010\214\011\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\116\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    List<Identifier> varList = new ArrayList<>(); // Lista delle variabili
    List<ExprOp> exprList = new ArrayList<>(); // Lista delle espressioni
    List<StatementOp> statList = new ArrayList<>(); // Lista delle istruzioni
    List<PVarOp> pVarList = new ArrayList<>(); // Lista dei parametri
    List<ParDeclOp> parDeclList = new ArrayList<>(); // Lista delle dichiarazioni dei parametri
    List<VarOptInitOp> varOptInitList = new ArrayList<>(); // Lista delle variabili con inizializzazione
    Stack<List<VarDeclOp>> varDeclStack = new Stack<>(); // Stack delle dichiarazioni delle variabili
    List<VarDeclOp> varDeclList = new ArrayList<>(); // Lista delle dichiarazioni delle variabili
    List<Object> declList = new ArrayList<>(); // Lista delle dichiarazioni


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object declist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmtlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ProgramOp((List<Object>) declist,
                                       new BeginEndOp( (List<VarDeclOp>) ((Stack<List<VarDeclOp>>) varlist).pop(),
                                       (List<StatementOp>) stmtlist)
                                       );
                statList.clear();
                declList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              Object RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            declList.add(0, vardecl);
            RESULT = declList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              Object RESULT =null;
		int defdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defdecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            declList.add(0, defdecl);
            RESULT = declList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Object>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                varDeclStack.peek().add((VarDeclOp) vd);
                RESULT = varDeclStack;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              Object RESULT =null;
		
                varDeclStack.push(new ArrayList<VarDeclOp>());
                RESULT = varDeclStack;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int varOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new VarDeclOp((List<VarOptInitOp>) varOpt, tc);
                varOptInitList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), null));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) e));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), null));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) e));
                   RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object paramList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunDeclOp(new Identifier((String) id), (List<ParDeclOp>) paramList, (String) t, (BodyOp) body);
                parDeclList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunDeclOp(new Identifier((String) id), null, (String) t, (BodyOp) body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parDeclList.add(0, (ParDeclOp) parDecl); RESULT = parDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParDecls ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parDeclList.add(0, (ParDeclOp) parDecl); RESULT = parDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ParDeclOp((List<PVarOp>) pVars, (String) t);
                pVarList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PVars ::= PVar COMMA PVars 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 pVarList.add(0, (PVarOp) pVar); RESULT = pVarList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PVars ::= PVar 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pVarList.add(0, (PVarOp) pVar); RESULT = pVarList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptType ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new BodyOp((List<VarDeclOp>)((Stack<List<VarDeclOp>>) vars).pop(),
                                (List<StatementOp>) stmts);
            statList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statements ::= Stat Statements 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 statList.add(0, (StatementOp) stmt); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statements ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<StatementOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadOp((List<Identifier>) v); varList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp((List<ExprOp>) e, null); exprList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp((List<ExprOp>) e, '\n'); exprList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new AssignOp((List<Identifier>) v, (List<ExprOp>) e);
            varList.clear();
            exprList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = call;
                exprList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElseOp((ExprOp) e,(BodyOp) b1,(BodyOp) b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenOp((ExprOp) e,(BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileOp((ExprOp) e, (BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp((ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Vars ::= ID PIPE Vars 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 varList.add(0, new Identifier((String) id)); RESULT = varList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Vars ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varList.add(0, new Identifier((String) id)); RESULT = varList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 exprList.add(0, (ExprOp) e); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.add(0, (ExprOp) e); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunCallOp(new Identifier((String) id), (List<ExprOp>) e);
                exprList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCallOp(new Identifier((String) id), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= Expr ArithOp Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arithOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arithOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arithOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (String) arithOp, (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "and", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "or", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, ">", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, ">=", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<=", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "==", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<>", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp("-", (ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp("not", (ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ArithOp ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ArithOp ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArithOp ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ArithOp ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Constant ::= TRUE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Constant ::= FALSE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int intcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int intc = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(intc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int doublecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doublecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double doublec = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(doublec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int charcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char charc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(charc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int stringcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(stringc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
