
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package toy3;

import java_cup.runtime.*;
import java.util.*;
import main.nodes.program.ProgramOp;
import main.nodes.program.BeginEndOp;
import main.nodes.declarations.VarDeclOp;
import main.nodes.declarations.VarOptInitOp;
import main.nodes.declarations.ParDeclOp;
import main.nodes.declarations.PVarOp;
import main.nodes.declarations.FunDeclOp;
import main.nodes.expr.ExprOp;
import main.nodes.expr.BinaryExprOp;
import main.nodes.expr.UnaryExprOp;
import main.nodes.expr.FunCallOp;
import main.nodes.common.Identifier;
import main.nodes.statements.StatementOp;
import main.nodes.statements.ReadOp;
import main.nodes.statements.WriteOp;
import main.nodes.statements.AssignOp;
import main.nodes.statements.IfThenElseOp;
import main.nodes.statements.IfThenOp;
import main.nodes.statements.WhileOp;
import main.nodes.statements.ReturnOp;
import main.nodes.statements.BodyOp;
import main.nodes.statements.AssignmentCascadeOp;
import main.nodes.statements.CascadeOp;
import main.nodes.types.ConstOp;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\003\000\002\006\005\000\002" +
    "\012\011\000\002\012\010\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\006\000\002\021\004\000\002" +
    "\021\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\022\021\000\002\030\005\000\002\030\003\000\002" +
    "\030\002\000\002\027\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\006" +
    "\000\002\025\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\004\005\001\002\000\004\002\251\001" +
    "\002\000\010\005\ufffd\012\010\064\006\001\002\000\010" +
    "\010\ufff7\041\147\057\250\001\002\000\004\010\243\001" +
    "\002\000\004\064\207\001\002\000\010\005\ufffd\012\010" +
    "\064\006\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\012\010\064\006\001\002\000\004\005\ufffe\001\002" +
    "\000\040\006\ufffb\013\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\032\ufffb\035\ufffb\050\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\001\002\000\040\006\uffe8\013" +
    "\043\024\027\025\036\026\026\027\031\032\023\035\037" +
    "\050\024\060\034\061\021\062\017\063\044\064\033\065" +
    "\041\001\002\000\050\007\uffb5\010\uffb5\011\uffb5\014\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\054\uffb5" +
    "\055\uffb5\057\uffb5\001\002\000\042\006\uffe8\013\043\016" +
    "\uffe8\024\027\025\036\026\026\027\031\032\023\035\037" +
    "\050\024\060\034\061\021\062\017\063\044\064\131\065" +
    "\041\001\002\000\050\007\uffb7\010\uffb7\011\uffb7\014\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\054\uffb7" +
    "\055\uffb7\057\uffb7\001\002\000\050\007\uffc2\010\uffc2\011" +
    "\uffc2\014\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\001\002\000\004\013\200" +
    "\001\002\000\026\013\043\024\027\025\036\035\037\050" +
    "\024\060\034\061\021\062\017\063\044\064\047\001\002" +
    "\000\004\006\176\001\002\000\026\013\043\024\027\025" +
    "\036\035\037\050\024\060\034\061\021\062\017\063\044" +
    "\064\047\001\002\000\050\007\uffba\010\uffba\011\uffba\014" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\054" +
    "\uffba\055\uffba\057\uffba\001\002\000\042\007\173\011\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\054\uffc3" +
    "\055\uffc3\001\002\000\004\013\160\001\002\000\044\007" +
    "\uffd6\011\156\014\uffd6\034\057\035\054\036\064\037\062" +
    "\042\063\043\056\044\067\045\061\046\060\047\066\051" +
    "\055\052\070\054\uffd6\055\uffd6\001\002\000\054\010\ufff7" +
    "\011\uffc4\013\050\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffd8\041\147\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\051\uffc4\052\uffc4\053\uffd8\054\uffc4\055\uffc4\057" +
    "\150\001\002\000\050\007\uffb8\010\uffb8\011\uffb8\014\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\054\uffb8" +
    "\055\uffb8\057\uffb8\001\002\000\042\006\ufffc\013\ufffc\016" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\035\ufffc" +
    "\050\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\001\002\000\050\007\uffb9\010\uffb9\011\uffb9\014\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\054\uffb9" +
    "\055\uffb9\057\uffb9\001\002\000\026\013\043\024\027\025" +
    "\036\035\037\050\024\060\034\061\021\062\017\063\044" +
    "\064\047\001\002\000\006\054\142\055\143\001\002\000" +
    "\004\013\112\001\002\000\006\040\106\053\105\001\002" +
    "\000\026\013\043\024\027\025\036\035\037\050\024\060" +
    "\034\061\021\062\017\063\044\064\047\001\002\000\050" +
    "\007\uffb6\010\uffb6\011\uffb6\014\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6\001" +
    "\002\000\034\014\065\034\057\035\054\036\064\037\062" +
    "\042\063\043\056\044\067\045\061\046\060\047\066\051" +
    "\055\052\070\001\002\000\050\007\uffc3\010\uffc3\011\uffc3" +
    "\014\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3" +
    "\054\uffc3\055\uffc3\057\uffc3\001\002\000\052\007\uffc4\010" +
    "\uffc4\011\uffc4\013\050\014\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\057\uffc4\001\002" +
    "\000\030\013\043\014\052\024\027\025\036\035\037\050" +
    "\024\060\034\061\021\062\017\063\044\064\047\001\002" +
    "\000\004\014\053\001\002\000\050\007\uffd4\010\uffd4\011" +
    "\uffd4\014\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\001\002\000\050\007\uffd5" +
    "\010\uffd5\011\uffd5\014\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\054\uffd5\055\uffd5\057\uffd5\001\002\000" +
    "\026\013\043\024\027\025\036\035\037\050\024\060\034" +
    "\061\021\062\017\063\044\064\047\001\002\000\026\013" +
    "\043\024\027\025\036\035\037\050\024\060\034\061\021" +
    "\062\017\063\044\064\047\001\002\000\026\013\043\024" +
    "\027\025\036\035\037\050\024\060\034\061\021\062\017" +
    "\063\044\064\047\001\002\000\026\013\043\024\027\025" +
    "\036\035\037\050\024\060\034\061\021\062\017\063\044" +
    "\064\047\001\002\000\026\013\043\024\027\025\036\035" +
    "\037\050\024\060\034\061\021\062\017\063\044\064\047" +
    "\001\002\000\026\013\043\024\027\025\036\035\037\050" +
    "\024\060\034\061\021\062\017\063\044\064\047\001\002" +
    "\000\026\013\043\024\027\025\036\035\037\050\024\060" +
    "\034\061\021\062\017\063\044\064\047\001\002\000\026" +
    "\013\043\024\027\025\036\035\037\050\024\060\034\061" +
    "\021\062\017\063\044\064\047\001\002\000\026\013\043" +
    "\024\027\025\036\035\037\050\024\060\034\061\021\062" +
    "\017\063\044\064\047\001\002\000\050\007\uffc7\010\uffc7" +
    "\011\uffc7\014\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7" +
    "\052\uffc7\054\uffc7\055\uffc7\057\uffc7\001\002\000\026\013" +
    "\043\024\027\025\036\035\037\050\024\060\034\061\021" +
    "\062\017\063\044\064\047\001\002\000\026\013\043\024" +
    "\027\025\036\035\037\050\024\060\034\061\021\062\017" +
    "\063\044\064\047\001\002\000\026\013\043\024\027\025" +
    "\036\035\037\050\024\060\034\061\021\062\017\063\044" +
    "\064\047\001\002\000\050\007\uffce\010\uffce\011\uffce\014" +
    "\uffce\034\057\035\054\036\064\037\062\042\063\043\056" +
    "\044\067\045\061\046\060\047\066\051\055\052\uffce\054" +
    "\uffce\055\uffce\057\uffce\001\002\000\050\007\uffcb\010\uffcb" +
    "\011\uffcb\014\uffcb\034\057\035\054\036\064\037\062\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\054\uffcb\055\uffcb\057\uffcb\001\002\000\050\007" +
    "\uffc8\010\uffc8\011\uffc8\014\uffc8\034\057\035\054\036\064" +
    "\037\062\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\057\uffc8\001\002" +
    "\000\050\007\uffd1\010\uffd1\011\uffd1\014\uffd1\034\057\035" +
    "\054\036\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1\057" +
    "\uffd1\001\002\000\050\007\uffcd\010\uffcd\011\uffcd\014\uffcd" +
    "\034\057\035\054\036\064\037\062\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\054\uffcd" +
    "\055\uffcd\057\uffcd\001\002\000\050\007\uffd0\010\uffd0\011" +
    "\uffd0\014\uffd0\034\057\035\054\036\uffd0\037\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\054\uffd0\055\uffd0\057\uffd0\001\002\000\050\007\uffca" +
    "\010\uffca\011\uffca\014\uffca\034\057\035\054\036\064\037" +
    "\062\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\051\uffca\052\uffca\054\uffca\055\uffca\057\uffca\001\002\000" +
    "\050\007\uffc9\010\uffc9\011\uffc9\014\uffc9\034\057\035\054" +
    "\036\064\037\062\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\057\uffc9" +
    "\001\002\000\050\007\uffd3\010\uffd3\011\uffd3\014\uffd3\034" +
    "\057\035\054\036\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\057\uffd3\001\002\000\050\007\uffcc\010\uffcc\011\uffcc" +
    "\014\uffcc\034\057\035\054\036\064\037\062\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\055\uffcc\057\uffcc\001\002\000\050\007\uffcf\010" +
    "\uffcf\011\uffcf\014\uffcf\034\057\035\054\036\064\037\062" +
    "\042\063\043\056\044\067\045\061\046\060\047\066\051" +
    "\uffcf\052\uffcf\054\uffcf\055\uffcf\057\uffcf\001\002\000\050" +
    "\007\uffd2\010\uffd2\011\uffd2\014\uffd2\034\057\035\054\036" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\057\uffd2\001" +
    "\002\000\004\007\111\001\002\000\026\013\043\024\027" +
    "\025\036\035\037\050\024\060\034\061\021\062\017\063" +
    "\044\064\047\001\002\000\004\007\110\001\002\000\042" +
    "\006\uffe4\013\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\032\uffe4\035\uffe4\050\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\001\002\000\042\006\uffe7\013" +
    "\uffe7\016\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7" +
    "\035\uffe7\050\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\001\002\000\006\014\uffdb\064\113\001\002" +
    "\000\004\040\140\001\002\000\006\007\136\014\uffdc\001" +
    "\002\000\004\014\116\001\002\000\004\066\117\001\002" +
    "\000\004\013\120\001\002\000\026\013\043\024\027\025" +
    "\036\035\037\050\024\060\034\061\021\062\017\063\044" +
    "\064\047\001\002\000\034\014\122\034\057\035\054\036" +
    "\064\037\062\042\063\043\056\044\067\045\061\046\060" +
    "\047\066\051\055\052\070\001\002\000\004\067\123\001" +
    "\002\000\004\013\124\001\002\000\006\014\uffdb\064\113" +
    "\001\002\000\004\014\126\001\002\000\004\015\127\001" +
    "\002\000\040\013\043\016\uffe8\024\027\025\036\026\026" +
    "\027\031\032\023\035\037\050\024\060\034\061\021\062" +
    "\017\063\044\064\131\065\041\001\002\000\004\016\135" +
    "\001\002\000\050\011\uffc4\013\050\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffd8\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffd8\054\uffc4\055" +
    "\uffc4\057\132\001\002\000\004\064\133\001\002\000\010" +
    "\040\uffd8\053\uffd8\057\132\001\002\000\006\040\uffd9\053" +
    "\uffd9\001\002\000\042\006\uffde\013\uffde\016\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\032\uffde\035\uffde\050\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\001\002" +
    "\000\006\014\uffdb\064\113\001\002\000\004\014\uffdd\001" +
    "\002\000\026\013\043\024\027\025\036\035\037\050\024" +
    "\060\034\061\021\062\017\063\044\064\047\001\002\000" +
    "\036\007\uffda\014\uffda\034\057\035\054\036\064\037\062" +
    "\042\063\043\056\044\067\045\061\046\060\047\066\051" +
    "\055\052\070\001\002\000\004\007\145\001\002\000\004" +
    "\007\144\001\002\000\042\006\uffe5\013\uffe5\016\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\032\uffe5\035\uffe5\050\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\001" +
    "\002\000\042\006\uffe6\013\uffe6\016\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\032\uffe6\035\uffe6\050\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\001\002\000\050" +
    "\007\uffc6\010\uffc6\011\uffc6\014\uffc6\034\057\035\054\036" +
    "\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\057\uffc6\001" +
    "\002\000\026\013\043\024\027\025\036\035\037\050\024" +
    "\060\034\061\021\062\017\063\044\064\047\001\002\000" +
    "\004\064\151\001\002\000\014\010\ufff7\040\uffd8\041\147" +
    "\053\uffd8\057\150\001\002\000\004\010\ufff9\001\002\000" +
    "\036\010\ufff6\034\057\035\054\036\064\037\062\042\063" +
    "\043\056\044\067\045\061\046\060\047\066\051\055\052" +
    "\070\057\154\001\002\000\004\064\006\001\002\000\004" +
    "\010\ufff8\001\002\000\026\013\043\024\027\025\036\035" +
    "\037\050\024\060\034\061\021\062\017\063\044\064\047" +
    "\001\002\000\012\007\uffd7\014\uffd7\054\uffd7\055\uffd7\001" +
    "\002\000\026\013\043\024\027\025\036\035\037\050\024" +
    "\060\034\061\021\062\017\063\044\064\047\001\002\000" +
    "\034\014\162\034\057\035\054\036\064\037\062\042\063" +
    "\043\056\044\067\045\061\046\060\047\066\051\055\052" +
    "\070\001\002\000\004\030\163\001\002\000\004\015\164" +
    "\001\002\000\040\013\ufffb\016\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\032\ufffb\035\ufffb\050\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\001\002\000\044\006" +
    "\uffe1\013\uffe1\016\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\031\166\032\uffe1\035\uffe1\050\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\001\002\000\004\015\164" +
    "\001\002\000\042\006\uffe2\013\uffe2\016\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\032\uffe2\035\uffe2\050\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\001\002\000" +
    "\040\013\043\016\uffe8\024\027\025\036\026\026\027\031" +
    "\032\023\035\037\050\024\060\034\061\021\062\017\063" +
    "\044\064\033\065\041\001\002\000\004\016\172\001\002" +
    "\000\050\005\uffea\006\uffea\012\uffea\013\uffea\016\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\035\uffea" +
    "\050\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\001\002\000\042\006\uffe3\013\uffe3\016\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\032\uffe3\035\uffe3\050\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\001\002" +
    "\000\034\007\175\034\057\035\054\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\055" +
    "\052\070\001\002\000\042\006\uffdf\013\uffdf\016\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf\035\uffdf\050\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\001" +
    "\002\000\004\002\000\001\002\000\050\007\uffc5\010\uffc5" +
    "\011\uffc5\014\uffc5\034\057\035\054\036\064\037\062\042" +
    "\063\043\056\044\067\045\061\046\060\047\066\051\uffc5" +
    "\052\uffc5\054\uffc5\055\uffc5\057\uffc5\001\002\000\026\013" +
    "\043\024\027\025\036\035\037\050\024\060\034\061\021" +
    "\062\017\063\044\064\047\001\002\000\034\014\202\034" +
    "\057\035\054\036\064\037\062\042\063\043\056\044\067" +
    "\045\061\046\060\047\066\051\055\052\070\001\002\000" +
    "\004\033\203\001\002\000\004\015\164\001\002\000\042" +
    "\006\uffe0\013\uffe0\016\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\032\uffe0\035\uffe0\050\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\001\002\000\006\006\uffe9\016" +
    "\uffe9\001\002\000\004\005\uffff\001\002\000\004\013\210" +
    "\001\002\000\010\014\216\056\214\064\211\001\002\000" +
    "\006\010\uffee\011\uffee\001\002\000\004\010\241\001\002" +
    "\000\006\010\uffef\011\237\001\002\000\004\064\236\001" +
    "\002\000\004\014\233\001\002\000\006\010\222\015\uffeb" +
    "\001\002\000\006\007\220\014\ufff2\001\002\000\006\056" +
    "\214\064\211\001\002\000\004\014\ufff3\001\002\000\014" +
    "\017\232\020\230\021\227\022\225\023\231\001\002\000" +
    "\004\015\164\001\002\000\010\005\ufff4\012\ufff4\064\ufff4" +
    "\001\002\000\010\007\uffbc\014\uffbc\015\uffbc\001\002\000" +
    "\004\015\uffec\001\002\000\010\007\uffbd\014\uffbd\015\uffbd" +
    "\001\002\000\010\007\uffbe\014\uffbe\015\uffbe\001\002\000" +
    "\010\007\uffbb\014\uffbb\015\uffbb\001\002\000\010\007\uffbf" +
    "\014\uffbf\015\uffbf\001\002\000\006\010\222\015\uffeb\001" +
    "\002\000\004\015\164\001\002\000\010\005\ufff5\012\ufff5" +
    "\064\ufff5\001\002\000\006\010\uffed\011\uffed\001\002\000" +
    "\006\056\214\064\211\001\002\000\004\010\ufff0\001\002" +
    "\000\014\017\232\020\230\021\227\022\225\023\231\001" +
    "\002\000\006\007\ufff1\014\ufff1\001\002\000\030\017\232" +
    "\020\230\021\227\022\225\023\231\024\027\025\036\060" +
    "\034\061\021\062\017\063\044\001\002\000\004\007\uffc1" +
    "\001\002\000\004\007\247\001\002\000\004\007\uffc0\001" +
    "\002\000\046\005\ufffa\006\ufffa\012\ufffa\013\ufffa\016\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\032\ufffa\035\ufffa\050" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\001\002\000\004\064\006\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\010\006\006\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\205\005\010\006\006\012\012\001\001\000\002\001\001" +
    "\000\012\003\013\005\010\006\006\012\012\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\024\005\034" +
    "\006\006\011\021\021\024\022\017\023\041\024\037\025" +
    "\027\026\031\001\001\000\002\001\001\000\020\011\021" +
    "\021\204\022\017\023\041\024\037\025\027\026\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\021\025\045\026\176\001\001\000\002\001" +
    "\001\000\010\011\021\025\045\026\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\021\025\045\026\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\021\025\045\026\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\021\024\050\025\045\026\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\021\025\045\026\103\001\001\000\010\011\021\025" +
    "\045\026\102\001\001\000\010\011\021\025\045\026\101" +
    "\001\001\000\010\011\021\025\045\026\100\001\001\000" +
    "\010\011\021\025\045\026\077\001\001\000\010\011\021" +
    "\025\045\026\076\001\001\000\010\011\021\025\045\026" +
    "\075\001\001\000\010\011\021\025\045\026\074\001\001" +
    "\000\010\011\021\025\045\026\073\001\001\000\002\001" +
    "\001\000\010\011\021\025\045\026\072\001\001\000\010" +
    "\011\021\025\045\026\071\001\001\000\010\011\021\025" +
    "\045\026\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\021\024\106\025\045" +
    "\026\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\113\030\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\021\025\045\026\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\113\030\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\021\021\127\022\017\023" +
    "\041\024\037\025\027\026\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\113" +
    "\030\136\001\001\000\002\001\001\000\010\011\021\025" +
    "\045\026\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\021\025\045\026\152\001\001" +
    "\000\006\006\151\023\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\154\001\001" +
    "\000\002\001\001\000\012\011\021\024\156\025\045\026" +
    "\031\001\001\000\002\001\001\000\010\011\021\025\045" +
    "\026\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\164\001\001\000\004\004\167\001\001\000\002" +
    "\001\001\000\004\020\166\001\001\000\002\001\001\000" +
    "\024\005\034\006\006\011\021\021\170\022\017\023\041" +
    "\024\037\025\027\026\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\021\025\045\026\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\214\014\216\015\211\016\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\222\001\001\000\002\001" +
    "\001\000\012\013\220\014\216\015\211\016\212\001\001" +
    "\000\002\001\001\000\004\010\225\001\001\000\004\020" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\233\001\001\000\004" +
    "\020\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\237\016\212\001\001\000\002\001\001\000\004" +
    "\010\241\001\001\000\002\001\001\000\010\007\244\010" +
    "\243\011\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\151\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    List<Identifier> varList = new ArrayList<>(); // Lista delle variabili
    List<ExprOp> exprList = new ArrayList<>(); // Lista delle espressioni
    List<StatementOp> statList = new ArrayList<>(); // Lista delle istruzioni
    List<PVarOp> pVarList = new ArrayList<>(); // Lista dei parametri
    List<ParDeclOp> parDeclList = new ArrayList<>(); // Lista delle dichiarazioni dei parametri
    List<VarOptInitOp> varOptInitList = new ArrayList<>(); // Lista delle variabili con inizializzazione
    Stack<List<VarDeclOp>> varDeclStack = new Stack<>(); // Stack delle dichiarazioni delle variabili
    List<VarDeclOp> varDeclList = new ArrayList<>(); // Lista delle dichiarazioni delle variabili
    List<Object> declList = new ArrayList<>(); // Lista delle dichiarazioni

    List<AssignmentCascadeOp> assignList = new ArrayList<>();

    Stack<List<AssignmentCascadeOp>> assignStack = new Stack<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object declist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmtlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new ProgramOp((List<Object>) declist,
                                       new BeginEndOp( (List<VarDeclOp>) ((Stack<List<VarDeclOp>>) varlist).pop(),
                                       (List<StatementOp>) stmtlist)
                                       );
                statList.clear();
                declList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              Object RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            declList.add(0, vardecl);
            RESULT = declList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              Object RESULT =null;
		int defdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defdecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            declList.add(0, defdecl);
            RESULT = declList;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Object>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                varDeclStack.peek().add((VarDeclOp) vd);
                RESULT = varDeclStack;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              Object RESULT =null;
		
                varDeclStack.push(new ArrayList<VarDeclOp>());
                RESULT = varDeclStack;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int varOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new VarDeclOp((List<VarOptInitOp>) varOpt, tc);
                varOptInitList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), null));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) e));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), null));
                    RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varOptInitList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) e));
                   RESULT = varOptInitList;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object paramList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunDeclOp(new Identifier((String) id), (List<ParDeclOp>) paramList, (String) t, (BodyOp) body);
                parDeclList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunDeclOp(new Identifier((String) id), null, (String) t, (BodyOp) body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parDeclList.add(0, (ParDeclOp) parDecl); RESULT = parDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParDecls ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parDeclList.add(0, (ParDeclOp) parDecl); RESULT = parDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ParDeclOp((List<PVarOp>) pVars, (String) t);
                pVarList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PVars ::= PVar COMMA PVars 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 pVarList.add(0, (PVarOp) pVar); RESULT = pVarList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PVars ::= PVar 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pVarList.add(0, (PVarOp) pVar); RESULT = pVarList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptType ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new BodyOp((List<VarDeclOp>)((Stack<List<VarDeclOp>>) vars).pop(),
                                (List<StatementOp>) stmts);
            statList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statements ::= Stat Statements 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 statList.add(0, (StatementOp) stmt); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statements ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<StatementOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadOp((List<Identifier>) v); varList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp((List<ExprOp>) e, null); exprList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp((List<ExprOp>) e, '\n'); exprList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new AssignOp((List<Identifier>) v, (List<ExprOp>) e);
            varList.clear();
            exprList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = call;
                exprList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElseOp((ExprOp) e,(BodyOp) b1,(BodyOp) b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenOp((ExprOp) e,(BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileOp((ExprOp) e, (BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp((ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= CASCADE LPAR Assignments RPAR FOR LPAR Expr RPAR UPDATE LPAR Assignments RPAR LBRAC Statements RBRAC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            List<AssignmentCascadeOp> updateList = (List<AssignmentCascadeOp>) ((Stack<List<AssignmentCascadeOp>>) a2).pop();
            List<AssignmentCascadeOp> initialList = (List<AssignmentCascadeOp>) ((Stack<List<AssignmentCascadeOp>>) a1).pop();
            RESULT = new CascadeOp((List<AssignmentCascadeOp>) initialList,
                                    (ExprOp) e,
                                    (List<AssignmentCascadeOp>) updateList,
                                    (List<StatementOp>) stmts);
            statList.clear();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Assignments ::= Assignment SEMI Assignments 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 assignStack.peek().add((AssignmentCascadeOp) a);
                                                 RESULT = assignStack; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignments ::= Assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 assignStack.push(new ArrayList<AssignmentCascadeOp>());
                   assignStack.peek().add((AssignmentCascadeOp) a);
                   RESULT = assignStack;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Assignments ::= 
            {
              Object RESULT =null;
		 assignStack.push(new ArrayList<AssignmentCascadeOp>());
                      RESULT = assignStack;
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Assignment ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentCascadeOp(new Identifier((String) id), (ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Vars ::= ID PIPE Vars 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 varList.add(0, new Identifier((String) id)); RESULT = varList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Vars ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varList.add(0, new Identifier((String) id)); RESULT = varList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 exprList.add(0, (ExprOp) e); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.add(0, (ExprOp) e); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunCallOp(new Identifier((String) id), (List<ExprOp>) e);
                exprList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunCallOp(new Identifier((String) id), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "+", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "-", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "*", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "/", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "and", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "or", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, ">", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, ">=", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<=", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "==", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, "<>", (ExprOp) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp("-", (ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp("not", (ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Constant ::= TRUE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Constant ::= FALSE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int intcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int intc = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(intc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int doublecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doublecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double doublec = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(doublec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int charcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char charc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(charc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int stringcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp(stringc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
